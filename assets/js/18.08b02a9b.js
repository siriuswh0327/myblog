(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{283:function(t,a,n){"use strict";n.r(a);var s=n(4),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"闭包不会造成内存泄漏哦！"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包不会造成内存泄漏哦！"}},[t._v("#")]),t._v(" 闭包不会造成内存泄漏哦！")]),t._v(" "),n("p",[t._v("昨天晚上上了网易前端微专业的第一次直播课，感觉非常好，老师也普及了一个之前面试经常会被问到的问题——闭包。并且老师在一开始提出了一个近乎颠覆之前认知的一个结论："),n("strong",[t._v("闭包不会造成内存泄漏")]),t._v("。")]),t._v(" "),n("p",[t._v("相信这个结论也颠覆了很多人的一个认知，那么我们接下来就来看看网易的老师是怎么解释这个问题的吧。\n闭包的概念最早出现于60年代，最早实现闭包的程序语言是[Scheme]。之后，闭包被广泛使用于[函数式编程]。\n实际上，"),n("strong",[t._v("闭包是一种带有执行环境的函数")]),t._v("。执行环境包括了：函数的词法环境（this、作用域）、标识符列表（用到但是未声明的变量）、表达式部分（函数体）。\n下面举一个JS中闭包的例子：")]),t._v(" "),n("div",{staticClass:"language-Javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2;")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("在上面的例子中我们可以看到，在内部函数中，我们并没有声明变量a，可是输出结果却是2。这个a就属于用到但未声明的变量，这也就是闭包与一般函数最大的区别所在。")]),t._v(" "),n("p",[t._v("那么闭包到底会不会造成内存泄漏呢？\n我们先来看维基百科里对于内存泄漏的定义：")]),t._v(" "),n("blockquote",[n("p",[t._v("在计算机科学中，内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。")])]),t._v(" "),n("p",[t._v("上面这段定义用通俗点的方法讲就是："),n("strong",[t._v("内存泄漏就是一些可以避免的内存花销")]),t._v("。\n那么我们再回过头看上面的例子，变量a是有实际用途的，因此这样的内存开销是不可避免的，因此这样的形式并不叫内存泄漏。")]),t._v(" "),n("p",[t._v("那么是什么原因会造成闭包会出现内存泄漏这种说法的呢？下面这张图给出了答案：\n"),n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/2609244-271699277ea7eb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}}),t._v("\n由于IE的垃圾回收机制采用的是引用计数策略，所以才会有闭包会造成内存泄漏的说法。")]),t._v(" "),n("blockquote",[n("p",[t._v("引用计数是计算机编程语言中的一种内存管理技术，是指将资源（可以是对象、内存或磁盘空间等等）的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。")])]),t._v(" "),n("p",[t._v("而诸如Chrome、Firefox等现代浏览器的垃圾回收机制是标记清除式的垃圾回收算法。")]),t._v(" "),n("blockquote",[n("p",[t._v("标记清除：垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记，然后，它会去掉环境中的变量的标记和被环境中的变量引用的变量的标记，此后，如果变量再被标记则表示此变量准备被删除。")])]),t._v(" "),n("p",[t._v("至此我们应该已经明白了，JS中内存泄漏的真正的罪魁祸首，也理解了闭包和内存泄漏的概念。希望下次再被问到闭包相关的问题的时候，我们不再不知所措。")]),t._v(" "),n("h2",{attrs:{id:"参考资料："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料："}},[t._v("#")]),t._v(" 参考资料：")]),t._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科 -- 闭包"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科 -- 内存泄漏"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科 -- 引用计数"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);